// KYS (Kalite YÃ¶netim Sistemi) Minimal Prisma Schema for Testing
// ISO 9001 Quality Management System Database Schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE TABLES FOR TESTING
// ============================================================================

model Department {
  id                 Int          @id @default(autoincrement())
  departmentName     String       @unique @map("department_name") @db.VarChar(150)
  description        String?      @db.Text
  managerUserId      Int?         @map("manager_user_id")
  parentDepartmentId Int?         @map("parent_department_id")
  isActive           Boolean      @default(true) @map("is_active")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  // Relations
  manager           User?               @relation("DepartmentManager", fields: [managerUserId], references: [id])
  parentDepartment  Department?         @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  childDepartments  Department[]        @relation("DepartmentHierarchy")
  users             User[]              @relation("UserDepartment")

  @@map("departments")
}

model User {
  id                  Int      @id @default(autoincrement())
  username            String   @unique @db.VarChar(100)
  passwordHash        String   @map("password_hash") @db.VarChar(255)
  email               String   @unique @db.VarChar(255)
  fullName            String   @map("full_name") @db.VarChar(255)
  departmentId        Int?     @map("department_id")
  position            String?  @db.VarChar(150)
  phone               String?  @db.VarChar(50)
  employeeNumber      String?  @unique @map("employee_number") @db.VarChar(50)
  hireDate            DateTime? @map("hire_date") @db.Date
  isActive            Boolean  @default(true) @map("is_active")
  isSystemAdmin       Boolean  @default(false) @map("is_system_admin")
  emailVerified       Boolean  @default(false) @map("email_verified")
  lastLoginAt         DateTime? @map("last_login_at")
  passwordChangedAt   DateTime @default(now()) @map("password_changed_at")
  avatarUrl           String?  @map("avatar_url") @db.VarChar(512)
  timezone            String   @default("Europe/Istanbul") @db.VarChar(50)
  language            String   @default("tr") @db.VarChar(10)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  department          Department?         @relation("UserDepartment", fields: [departmentId], references: [id])
  managedDepartments  Department[]        @relation("DepartmentManager")
  userRoles           UserRole[]
  assignedByRoles     UserRole[]          @relation("UserRoleAssigner")

  @@map("users")
}

model Role {
  id           Int      @id @default(autoincrement())
  roleName     String   @unique @map("role_name") @db.VarChar(100)
  description  String?  @db.Text
  isSystemRole Boolean  @default(false) @map("is_system_role")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model UserRole {
  userId       Int       @map("user_id")
  roleId       Int       @map("role_id")
  assignedByUserId Int?  @map("assigned_by_user_id")
  assignedAt   DateTime  @default(now()) @map("assigned_at")
  expiresAt    DateTime? @map("expires_at")
  isActive     Boolean   @default(true) @map("is_active")

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedBy   User?     @relation("UserRoleAssigner", fields: [assignedByUserId], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id             Int      @id @default(autoincrement())
  permissionName String   @unique @map("permission_name") @db.VarChar(150)
  description    String?  @db.Text
  moduleName     String?  @map("module_name") @db.VarChar(100)
  resource       String?  @db.VarChar(100)
  action         String?  @db.VarChar(50)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int      @map("role_id")
  permissionId Int      @map("permission_id")
  grantedByUserId Int?  @map("granted_by_user_id")
  grantedAt    DateTime @default(now()) @map("granted_at")

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// ============================================================================
// SYSTEM TABLES
// ============================================================================

model SystemSetting {
  id           Int      @id @default(autoincrement())
  settingKey   String   @unique @map("setting_key") @db.VarChar(100)
  settingValue String?  @map("setting_value") @db.Text
  settingType  String   @default("string") @map("setting_type") @db.VarChar(50)
  description  String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}